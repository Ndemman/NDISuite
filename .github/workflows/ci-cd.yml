name: NDISuite CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-django pytest-cov
    
    - name: Run Django Tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DJANGO_SECRET_KEY: test_secret_key_for_ci
        DJANGO_SETTINGS_MODULE: ndisuite.settings
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd backend
        python manage.py test
    
    - name: Run Django Migrations Check
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DJANGO_SECRET_KEY: test_secret_key_for_ci
        DJANGO_SETTINGS_MODULE: ndisuite.settings
      run: |
        cd backend
        python manage.py makemigrations --check --dry-run
    
    - name: Check code quality with Flake8
      run: |
        pip install flake8
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install NPM dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Check code quality with ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Check TypeScript compilation
      run: |
        cd frontend
        npm run type-check
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test

  build:
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      backend_image: ${{ steps.image_tags.outputs.backend_image }}
      frontend_image: ${{ steps.image_tags.outputs.frontend_image }}
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Generate image tags
      id: image_tags
      run: |
        # Generate unique image tags based on git sha and branch
        BACKEND_IMAGE="ndisuite/backend:${GITHUB_SHA::8}"
        FRONTEND_IMAGE="ndisuite/frontend:${GITHUB_SHA::8}"
        
        # Output for later steps
        echo "::set-output name=backend_image::${BACKEND_IMAGE}"
        echo "::set-output name=frontend_image::${FRONTEND_IMAGE}"
        
        # Also tag with branch name
        echo "::set-output name=backend_branch_image::ndisuite/backend:${GITHUB_REF##*/}"
        echo "::set-output name=frontend_branch_image::ndisuite/frontend:${GITHUB_REF##*/}"
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        push: true
        tags: |
          ${{ steps.image_tags.outputs.backend_image }}
          ${{ steps.image_tags.outputs.backend_branch_image }}
          ${{ github.ref == 'refs/heads/main' && 'ndisuite/backend:latest' || '' }}
        cache-from: type=registry,ref=ndisuite/backend:buildcache
        cache-to: type=registry,ref=ndisuite/backend:buildcache,mode=max
        
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ steps.image_tags.outputs.frontend_image }}
          ${{ steps.image_tags.outputs.frontend_branch_image }}
          ${{ github.ref == 'refs/heads/main' && 'ndisuite/frontend:latest' || '' }}
        cache-from: type=registry,ref=ndisuite/frontend:buildcache
        cache-to: type=registry,ref=ndisuite/frontend:buildcache,mode=max
  
  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
    
    - name: Save DigitalOcean kubeconfig
      run: doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}
    
    - name: Update deployment configs
      run: |
        # Replace image tags in Kubernetes deployment files
        sed -i 's|image: ndisuite/backend:.*|image: ${{ needs.build.outputs.backend_image }}|' kubernetes/staging/backend-deployment.yaml
        sed -i 's|image: ndisuite/frontend:.*|image: ${{ needs.build.outputs.frontend_image }}|' kubernetes/staging/frontend-deployment.yaml
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f kubernetes/staging/namespace.yaml
        kubectl apply -f kubernetes/staging/configmap.yaml
        kubectl apply -f kubernetes/staging/secrets.yaml
        kubectl apply -f kubernetes/staging/backend-deployment.yaml
        kubectl apply -f kubernetes/staging/frontend-deployment.yaml
        kubectl apply -f kubernetes/staging/service.yaml
        kubectl apply -f kubernetes/staging/ingress.yaml
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/ndisuite-backend -n ndisuite-staging
        kubectl rollout status deployment/ndisuite-frontend -n ndisuite-staging
    
    - name: Notify deployment status
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: "Staging Deployment"
        SLACK_MESSAGE: "Staging deployment ${{ job.status }}"
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
  
  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
    
    - name: Save DigitalOcean kubeconfig
      run: doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}
    
    - name: Update deployment configs
      run: |
        # Replace image tags in Kubernetes deployment files
        sed -i 's|image: ndisuite/backend:.*|image: ${{ needs.build.outputs.backend_image }}|' kubernetes/production/backend-deployment.yaml
        sed -i 's|image: ndisuite/frontend:.*|image: ${{ needs.build.outputs.frontend_image }}|' kubernetes/production/frontend-deployment.yaml
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f kubernetes/production/namespace.yaml
        kubectl apply -f kubernetes/production/configmap.yaml
        kubectl apply -f kubernetes/production/secrets.yaml
        kubectl apply -f kubernetes/production/backend-deployment.yaml
        kubectl apply -f kubernetes/production/frontend-deployment.yaml
        kubectl apply -f kubernetes/production/service.yaml
        kubectl apply -f kubernetes/production/ingress.yaml
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/ndisuite-backend -n ndisuite-production
        kubectl rollout status deployment/ndisuite-frontend -n ndisuite-production
    
    - name: Notify deployment status
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: "Production Deployment"
        SLACK_MESSAGE: "Production deployment ${{ job.status }}"
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
